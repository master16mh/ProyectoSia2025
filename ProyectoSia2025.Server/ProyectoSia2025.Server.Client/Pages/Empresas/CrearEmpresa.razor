@page "/empresas/crear"
@inject IHttpService http
@inject NavigationManager navHttp

<h3>Añadir Empresa Asociada</h3>

<EditForm Model="Empresas" OnValidSubmit="GuardarEmpresa">
   <DataAnnotationsValidator />
   <div class="form-group">
       <label>Nombre</label>
        <InputText class="form-control" @bind-Value="Empresas.Nombre" />
        <ValidationMessage For="@(() => Empresas.Nombre)" />
   </div>
   <div class="form-group">
        <label>Razón Social</label>
        <InputText class="form-control" @bind-Value="Empresas.RazonSocial" />
        <ValidationMessage For="@(() => Empresas.RazonSocial)" />
   </div>
    <div class="form-group">
        <label>CUIT</label>
        <InputText class="form-control" @bind-Value="Empresas.CUIT" />
        <ValidationMessage For="@(() => Empresas.CUIT)" />
    </div>
    <div class="form-group">
        <label>Dirección</label>
        <InputText class="form-control" @bind-Value="Empresas.Direccion" />
        <ValidationMessage For="@(() => Empresas.Direccion)" />
    </div>
   <button class="btn btn-primary" type="submit">Aceptar</button>
   <button class="btn btn-secondary" @onclick="Cancelar">Volver</button>
</EditForm>

@code {
    private EmpresasCrearDTO Empresas = new EmpresasCrearDTO();

    private async Task GuardarEmpresa()
    {
        var HttpResponse = await http.Post<EmpresasCrearDTO, int>("api/Empresas", Empresas);
        if(!HttpResponse.Error)
        {
            navHttp.NavigateTo("/empresas");
        }
        else
        {
            //Mensaje de error
            Console.WriteLine(HttpResponse.GetErrorMessage());
        }
    }

    private async Task Cancelar()
    {
        navHttp.NavigateTo("/empresas");
    }
}
